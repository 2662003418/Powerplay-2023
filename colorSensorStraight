package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;


@Autonomous(name = "Red_Right", group = "Sensor")
// Comment this out to add to the opmode list
public class Red_Right extends LinearOpMode {


    ColorSensor sensor_Color;
    DcMotor Front_leftDrive = null;
    DcMotor Back_rightDrive = null;
    DcMotor Front_rightDrive = null;
    DcMotor Back_leftDrive = null;

    Servo claw = null;

    DcMotor lift = null;
    @Override
    public void runOpMode() throws InterruptedException {
        sensor_Color = hardwareMap.get(ColorSensor.class, "sensor_color");
        Front_leftDrive = hardwareMap.get(DcMotor.class, "leftFront");
        Back_rightDrive= hardwareMap.get(DcMotor.class, "rightRear");
        Front_rightDrive= hardwareMap.get(DcMotor.class, " rightFront");
        Back_leftDrive= hardwareMap.get(DcMotor.class, " leftRear");
        claw = hardwareMap.get(Servo.class, "claw");
        lift = hardwareMap.get(DcMotor.class,"lift");

        Front_leftDrive.setDirection(DcMotor.Direction.FORWARD);
        Front_rightDrive.setDirection(DcMotor.Direction.REVERSE);
        Back_leftDrive.setDirection(DcMotor.Direction.FORWARD);
        Back_rightDrive.setDirection(DcMotor.Direction.REVERSE);
        lift.setDirection(DcMotorSimple.Direction.REVERSE);
        waitForStart();

        double clawOffset = 0;

        while(opModeIsActive()){
            sensor_Color.enableLed(true);

            telemetry.addData("red", sensor_Color.red());
            telemetry.addData("green", sensor_Color.green());
            telemetry.addData("blue", sensor_Color.blue());
            telemetry.addData("argb", sensor_Color.argb());
            telemetry.update();



            liftUp(0.5,2000);

            DriveForward(0.5,1700);
            //strafe left for a bit and then stop for color sensor to identify `
            Stop(1000);

            telemetry.addData("red", sensor_Color.red());
            telemetry.addData("green", sensor_Color.green());
            telemetry.addData("blue", sensor_Color.blue());
            telemetry.addData("argb", sensor_Color.argb());
            telemetry.update();

            Stop(1000);
            if(sensor_Color.blue()> sensor_Color.green() && sensor_Color.blue()>sensor_Color.red()){
                DriveForward(0.5,100);
                StrafeRight(0.5,2000);
                DriveForward(0.5,500);
            }

            else if (sensor_Color.red()> sensor_Color.blue() && sensor_Color.red()>sensor_Color.green()){
                DriveForward(0.5,700);

            }

            else if (sensor_Color.green()>sensor_Color.blue() && sensor_Color.green()>sensor_Color.red()) {
                DriveForward(0.5,100);
                StrafeLeft(0.5,2000);
                DriveForward(0.5,500);


            }


            Stop(30000);

        }


    }


    public void liftUp(double power, long time) throws InterruptedException {
        lift.setPower(power);
        Thread.sleep(time);
    }
    public void Stop(long time) throws InterruptedException {
        Front_leftDrive.setPower(0);
        Front_rightDrive.setPower(0);
        Back_leftDrive.setPower(0);
        Back_rightDrive.setPower(0);
        lift.setPower(0);
        Thread.sleep(time);
    }

    public void DriveForward(double power,long time) throws InterruptedException {
        Front_leftDrive.setPower(power);
        Front_rightDrive.setPower(power);
        Back_leftDrive.setPower(power);
       Back_rightDrive.setPower(power);
        Thread.sleep(time);
    }

    public void DriveBackward(double power,long time) throws InterruptedException {
        Front_leftDrive.setPower(-power);
        Front_rightDrive.setPower(-power);
        Back_leftDrive.setPower(-power);
        Back_rightDrive.setPower(-power);
        Thread.sleep(time);
    }
    public void StrafeLeft(double power,long time) throws InterruptedException {
        Front_leftDrive.setPower(-power);
        Front_rightDrive.setPower(power);
        Back_leftDrive.setPower(power);
        Back_rightDrive.setPower(-power);
        Thread.sleep(time);
    }

    public void StrafeRight(double power,long time) throws InterruptedException {
        Front_leftDrive.setPower(power);
        Front_rightDrive.setPower(-power);
        Back_leftDrive.setPower(-power);
        Back_rightDrive.setPower(power);
        Thread.sleep(time);
    }

    public void rotateRight (double power, long time) throws InterruptedException {

        Front_leftDrive.setPower(power);
        Front_rightDrive.setPower(-power);
        Back_leftDrive.setPower(power);
        Back_rightDrive.setPower(-power);
        Thread.sleep(time);
    }
}
