package org.firstinspires.ftc.teamcode;

import android.app.Activity;
import android.graphics.Color;
import android.view.View;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DistanceSensor;

import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;

import java.util.Locale;


@Autonomous(name = "Auto Timed ", group = "Sensor")
//@Disabled                            // Comment this out to add to the opmode list
public class Noncolor_signal extends LinearOpMode {


    DistanceSensor sensorDistance;
    DcMotor Front_leftDrive = null;
    DcMotor Back_rightDrive = null;
    DcMotor Front_rightDrive = null;
    DcMotor Back_leftDrive = null;

    @Override
    public void runOpMode() throws InterruptedException {


        Front_leftDrive = hardwareMap.get(DcMotor.class, "leftFront");
        Back_rightDrive= hardwareMap.get(DcMotor.class, "rightRear");
        Front_rightDrive= hardwareMap.get(DcMotor.class, " rightFront");
        Back_leftDrive= hardwareMap.get(DcMotor.class, " leftRear");

        Front_leftDrive.setDirection(DcMotor.Direction.FORWARD);
        Front_rightDrive.setDirection(DcMotor.Direction.REVERSE);
        Back_leftDrive.setDirection(DcMotor.Direction.FORWARD);
        Back_rightDrive.setDirection(DcMotor.Direction.REVERSE);

        waitForStart();


        DriveForward(0.5,2200);
        Stop(100);

    }




    //Methods needed to drive to the parking lot
    public void Stop(long time) throws InterruptedException {
        Front_leftDrive.setPower(0);
        Front_rightDrive.setPower(0);
        Back_leftDrive.setPower(0);
        Back_rightDrive.setPower(0);
        Thread.sleep(time);
    }


    public void DriveForward(double power,long time) throws InterruptedException {
        Front_leftDrive.setPower(power);
        Front_rightDrive.setPower(power);
        Back_leftDrive.setPower(power);
        Back_rightDrive.setPower(power);
        Thread.sleep(time);
    }

    public void DriveBackward(double power,long time) throws InterruptedException {
        Front_leftDrive.setPower(-power);
        Front_rightDrive.setPower(-power);
        Back_leftDrive.setPower(-power);
        Back_rightDrive.setPower(-power);
        Thread.sleep(time);
    }
    public void StrafeLeft(double power,long time) throws InterruptedException {
        Front_leftDrive.setPower(-power);
        Front_rightDrive.setPower(power);
        Back_leftDrive.setPower(power);
        Back_rightDrive.setPower(-power);
        Thread.sleep(time);
    }

    public void StrafeRight(double power,long time) throws InterruptedException {
        Front_leftDrive.setPower(power);
        Front_rightDrive.setPower(-power);
        Back_leftDrive.setPower(-power);
        Back_rightDrive.setPower(power);
        Thread.sleep(time);
    }
}
